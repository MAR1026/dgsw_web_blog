{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\Users\\\\User\\\\IdeaProjects\\\\web01board\\\\board_front\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\Users\\\\User\\\\IdeaProjects\\\\web01board\\\\board_front\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Users\\\\User\\\\IdeaProjects\\\\web01board\\\\board_front\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class2, _temp;\n\nimport { action, observable } from \"mobx\";\nimport axios from 'axios';\nlet UserStore = (_class = (_temp = _class2 = class UserStore {\n  static getInstance() {\n    if (UserStore.__instance === null) UserStore.__instance = new UserStore();\n    return UserStore.__instance;\n  }\n\n  constructor() {\n    _initializerDefineProperty(this, \"user\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"login\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"logout\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"editUser\", _descriptor4, this);\n\n    UserStore.__instance = this;\n  }\n\n}, _class2.__instance = null, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"user\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"login\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async userInfo => {\n      try {\n        this.user = null;\n        let response = await axios({\n          url: 'http://localhost:8080/api/user/login',\n          headers: {\n            'Content-Type': 'application/json; charset=UTF-8'\n          },\n          method: 'post',\n          timeout: 3000,\n          data: JSON.stringify(userInfo)\n        });\n        console.log(response);\n\n        if (response.status === 200) {\n          if (response.data === null) throw new Error(\"없는 계정 입니다.\");\n          this.user = response.data;\n          return true;\n        }\n      } catch (e) {\n        alert(\"로그인 실패 : \" + e.toString());\n        return false;\n      }\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"logout\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      try {\n        this.user = null;\n        if (this.user === null) return true;else return false;\n      } catch (e) {\n        return false;\n      }\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"editUser\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async editInfo => {\n      try {\n        this.user = null;\n        let response = await axios({\n          url: 'http://localhost:8080/api/user/modify',\n          headers: {\n            'Content-Type': 'application/json; charset=UTF-8'\n          },\n          method: 'put',\n          timeout: 3000,\n          data: JSON.stringify(editInfo)\n        });\n        console.log(response);\n\n        if (response.status === 200) {\n          this.user = response.data;\n          return true;\n        }\n      } catch (e) {\n        alert(\"회원정보 수정 실패 : \" + e.toString());\n        return false;\n      }\n    };\n  }\n})), _class);\nexport default UserStore.getInstance();","map":{"version":3,"sources":["C:\\Users\\User\\IdeaProjects\\web01board\\board_front\\src\\Stores\\UserStore.js"],"names":["action","observable","axios","UserStore","getInstance","__instance","constructor","userInfo","user","response","url","headers","method","timeout","data","JSON","stringify","console","log","status","Error","e","alert","toString","editInfo"],"mappings":";;;;;;AAAA,SAAQA,MAAR,EAAgBC,UAAhB,QAAiC,MAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;IAEMC,S,gCAAN,MAAMA,SAAN,CAAgB;AAGZ,SAAOC,WAAP,GAAqB;AACjB,QAAID,SAAS,CAACE,UAAV,KAAyB,IAA7B,EACIF,SAAS,CAACE,UAAV,GAAuB,IAAIF,SAAJ,EAAvB;AACJ,WAAOA,SAAS,CAACE,UAAjB;AACH;;AAEDC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA;;AAAA;;AACVH,IAAAA,SAAS,CAACE,UAAV,GAAuB,IAAvB;AACH;;AAXW,C,UACLA,U,GAAa,I,8EAYnBJ,U;;;;;WAAkB,I;;yEAClBD,M;;;;;WAAe,MAAOO,QAAP,IAAoB;AAChC,UAAI;AACA,aAAKC,IAAL,GAAY,IAAZ;AACA,YAAIC,QAAQ,GAAG,MAAMP,KAAK,CAAC;AACvBQ,UAAAA,GAAG,EAAE,sCADkB;AAEvBC,UAAAA,OAAO,EAAE;AACL,4BAAgB;AADX,WAFc;AAKvBC,UAAAA,MAAM,EAAE,MALe;AAMvBC,UAAAA,OAAO,EAAE,IANc;AAOvBC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,QAAf;AAPiB,SAAD,CAA1B;AAUAU,QAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;;AACA,YAAGA,QAAQ,CAACU,MAAT,KAAoB,GAAvB,EAA4B;AACxB,cAAGV,QAAQ,CAACK,IAAT,KAAkB,IAArB,EAA2B,MAAM,IAAIM,KAAJ,CAAU,YAAV,CAAN;AAC3B,eAAKZ,IAAL,GAAYC,QAAQ,CAACK,IAArB;AACA,iBAAO,IAAP;AACH;AAEJ,OAnBD,CAmBE,OAAOO,CAAP,EAAU;AACRC,QAAAA,KAAK,CAAC,cAAcD,CAAC,CAACE,QAAF,EAAf,CAAL;AACA,eAAO,KAAP;AACH;AACJ,K;;0EAEAvB,M;;;;;WAAgB,MAAM;AACnB,UAAI;AACA,aAAKQ,IAAL,GAAY,IAAZ;AACA,YAAG,KAAKA,IAAL,KAAc,IAAjB,EACI,OAAO,IAAP,CADJ,KAGI,OAAO,KAAP;AACP,OAND,CAME,OAAOa,CAAP,EAAU;AACR,eAAO,KAAP;AACH;AACJ,K;;4EAEArB,M;;;;;WAAkB,MAAOwB,QAAP,IAAoB;AACnC,UAAI;AACA,aAAKhB,IAAL,GAAY,IAAZ;AACA,YAAIC,QAAQ,GAAG,MAAMP,KAAK,CAAC;AACvBQ,UAAAA,GAAG,EAAE,uCADkB;AAEvBC,UAAAA,OAAO,EAAE;AACF,4BAAgB;AADd,WAFc;AAKvBC,UAAAA,MAAM,EAAE,KALe;AAMvBC,UAAAA,OAAO,EAAE,IANc;AAOvBC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeQ,QAAf;AAPiB,SAAD,CAA1B;AAUAP,QAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;;AACA,YAAGA,QAAQ,CAACU,MAAT,KAAoB,GAAvB,EAA4B;AACxB,eAAKX,IAAL,GAAYC,QAAQ,CAACK,IAArB;AACA,iBAAO,IAAP;AACH;AAEJ,OAlBD,CAkBE,OAAOO,CAAP,EAAU;AACRC,QAAAA,KAAK,CAAC,kBAAkBD,CAAC,CAACE,QAAF,EAAnB,CAAL;AACA,eAAO,KAAP;AACH;AACJ,K;;;AAGL,eAAepB,SAAS,CAACC,WAAV,EAAf","sourcesContent":["import {action, observable} from \"mobx\";\r\nimport axios from 'axios';\r\n\r\nclass UserStore {\r\n    static __instance = null;\r\n\r\n    static getInstance() {\r\n        if (UserStore.__instance === null)\r\n            UserStore.__instance = new UserStore();\r\n        return UserStore.__instance;\r\n    }\r\n\r\n    constructor() {\r\n        UserStore.__instance = this;\r\n    }\r\n\r\n    @observable user = null;\r\n    @action login = async (userInfo) => {\r\n        try {\r\n            this.user = null;\r\n            let response = await axios({\r\n                url: 'http://localhost:8080/api/user/login',\r\n                headers: {\r\n                    'Content-Type': 'application/json; charset=UTF-8'\r\n                },\r\n                method: 'post',\r\n                timeout: 3000,\r\n                data: JSON.stringify(userInfo)\r\n                });\r\n\r\n            console.log(response);\r\n            if(response.status === 200) {\r\n                if(response.data === null) throw new Error(\"없는 계정 입니다.\");\r\n                this.user = response.data;\r\n                return true;\r\n            }\r\n\r\n        } catch (e) {\r\n            alert(\"로그인 실패 : \" + e.toString());\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @action logout = () => {\r\n        try {\r\n            this.user = null;\r\n            if(this.user === null)\r\n                return true;\r\n            else\r\n                return false;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @action editUser = async (editInfo) => {\r\n        try {\r\n            this.user = null;\r\n            let response = await axios({\r\n                url: 'http://localhost:8080/api/user/modify',\r\n                headers: {\r\n                       'Content-Type': 'application/json; charset=UTF-8'\r\n                },\r\n                method: 'put',\r\n                timeout: 3000,\r\n                data: JSON.stringify(editInfo)\r\n            });\r\n\r\n            console.log(response);\r\n            if(response.status === 200) {\r\n                this.user = response.data;\r\n                return true;\r\n            }\r\n\r\n        } catch (e) {\r\n            alert(\"회원정보 수정 실패 : \" + e.toString());\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default UserStore.getInstance();"]},"metadata":{},"sourceType":"module"}